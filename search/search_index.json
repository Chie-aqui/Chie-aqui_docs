{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao Chie aqui","text":""},{"location":"#sobre-o-projeto","title":"Sobre o Projeto","text":"<p>O Chie-aqui \u00e9 um projeto que simula uma plataforma que promove a comunica\u00e7\u00e3o entre consumidores e empresas. Desenvolvido em inicialmente com Java como trabalho pr\u00e1tico universit\u00e1rio, o sistema permite que usu\u00e1rios d\u00ea feedbacks em empresas e que as empresas possam atender a poss\u00edveis reclama\u00e7\u00f5es destinadas as mesmas.</p>"},{"location":"#o-que-voce-encontrara-aqui","title":"O que voc\u00ea encontrar\u00e1 aqui","text":"<p>Esta documenta\u00e7\u00e3o cont\u00e9m tudo o que voc\u00ea precisa saber sobre o sistema:</p> <ul> <li>Hist\u00f3rias de Usu\u00e1rio - Todas as funcionalidades do sistema organizadas por perfil</li> <li>Guia de Uso - Como navegar e utilizar cada funcionalidade  </li> <li>Arquitetura - Estrutura t\u00e9cnica e organiza\u00e7\u00e3o do c\u00f3digo</li> </ul>"},{"location":"#tipos-de-usuario","title":"Tipos de Usu\u00e1rio","text":""},{"location":"#usuario","title":"Usu\u00e1rio","text":"<p>Pessoas interessadas em alugar ou comprar im\u00f3veis. Podem visualizar propriedades, favoritar, agendar visitas e fazer propostas.</p>"},{"location":"#proprietario","title":"Propriet\u00e1rio","text":"<p>Donos de im\u00f3veis que desejam anunci\u00e1-los na plataforma. Podem cadastrar casas e apartamentos, gerenciar propostas e visitas.</p>"},{"location":"#administrador","title":"Administrador","text":"<p>Respons\u00e1veis pela modera\u00e7\u00e3o da plataforma. T\u00eam controle total sobre usu\u00e1rios, propriet\u00e1rios e im\u00f3veis cadastrados.</p>"},{"location":"arquitetura/arquitetura/","title":"Documento de Arquitetura \u2013 Sistema Reclame Aqui Acad\u00eamico","text":""},{"location":"arquitetura/arquitetura/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a arquitetura escolhida para o Sistema Reclame Aqui Acad\u00eamico, detalhando como os componentes se organizam e interagem para formar uma aplica\u00e7\u00e3o web robusta, modular e escal\u00e1vel.  </p> <p>O sistema foi desenvolvido com Django e Django REST Framework (DRF), utilizando PostgreSQL como banco de dados relacional e containeriza\u00e7\u00e3o com Docker para facilitar a portabilidade e o deployment.  </p>"},{"location":"arquitetura/arquitetura/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O sistema adota uma arquitetura REST baseada no padr\u00e3o MTV (Model-Template-View) do Django, adaptado para APIs atrav\u00e9s do Django REST Framework.  </p> <p>Essa escolha garante: - Separa\u00e7\u00e3o clara de responsabilidades - Facilidade de manuten\u00e7\u00e3o e testes - Escalabilidade horizontal - Portabilidade via containers Docker  </p>"},{"location":"arquitetura/arquitetura/#caracteristicas-principais","title":"Caracter\u00edsticas Principais:","text":"<ul> <li>API REST como interface de comunica\u00e7\u00e3o  </li> <li>Padr\u00e3o MTV (Model, Template, View) adaptado para APIs  </li> <li>Django ORM para abstra\u00e7\u00e3o do banco de dados  </li> <li>DRF Serializers para valida\u00e7\u00e3o e transforma\u00e7\u00e3o de dados  </li> <li>Containeriza\u00e7\u00e3o (Docker + Docker Compose) para deployment  </li> </ul>"},{"location":"arquitetura/arquitetura/#componentes-principais","title":"Componentes Principais","text":""},{"location":"arquitetura/arquitetura/#1-camada-de-apresentacao-viewscontrollers","title":"1. Camada de Apresenta\u00e7\u00e3o (Views/Controllers)","text":"<p>Implementada pelas Views do DRF (ViewSets e APIViews): - Recebem requisi\u00e7\u00f5es HTTP (GET, POST, PUT, DELETE) - Validam dados de entrada usando Serializers - Chamam a l\u00f3gica de neg\u00f3cio (Services ou direto nos Models) - Retornam respostas HTTP em formato JSON*  </p>"},{"location":"arquitetura/arquitetura/#2-camada-de-logica-de-negocio-servicesuse-cases","title":"2. Camada de L\u00f3gica de Neg\u00f3cio (Services/Use Cases)","text":"<p>Nem sempre \u00e9 explicitada no Django, mas pode ser organizada em services.py: - Implementa as regras de neg\u00f3cio (ex.: fluxo de cadastro de reclama\u00e7\u00e3o, autentica\u00e7\u00e3o, modera\u00e7\u00e3o) - Centraliza valida\u00e7\u00f5es espec\u00edficas do dom\u00ednio - Facilita a testabilidade e reutiliza\u00e7\u00e3o de l\u00f3gica  </p>"},{"location":"arquitetura/arquitetura/#3-camada-de-dados-models-e-orm","title":"3. Camada de Dados (Models e ORM)","text":"<p>Gerenciada pelo Django ORM: - Defini\u00e7\u00e3o de Models representando as entidades (Usu\u00e1rio, Empresa, Reclama\u00e7\u00e3o, Resposta) - Cria\u00e7\u00e3o autom\u00e1tica de tabelas no PostgreSQL via Migrations - Opera\u00e7\u00f5es CRUD com abstra\u00e7\u00e3o em Python (<code>.objects.create()</code>, <code>.filter()</code>, etc.) - Relacionamentos (OneToMany, ManyToMany, ForeignKey) - Prote\u00e7\u00e3o contra SQL Injection de forma nativa  </p>"},{"location":"arquitetura/arquitetura/#4-serializers-camada-de-validacao-e-transformacao","title":"4. Serializers (Camada de Valida\u00e7\u00e3o e Transforma\u00e7\u00e3o)","text":"<p>Fornecida pelo Django Rest Framework: - Valida\u00e7\u00e3o de dados de entrada da API - Transforma\u00e7\u00e3o de objetos Django (Models) em JSON - Defini\u00e7\u00e3o de regras de serializa\u00e7\u00e3o e deserializa\u00e7\u00e3o - Suporte a nested serializers para entidades relacionadas  </p>"},{"location":"arquitetura/arquitetura/#padrao-mtv-adaptado-ao-django-rest-framework","title":"Padr\u00e3o MTV Adaptado ao Django Rest Framework","text":""},{"location":"arquitetura/arquitetura/#model","title":"Model","text":"<ul> <li>Django Models representam as tabelas do banco  </li> <li>ORM cuida da persist\u00eancia e integridade dos dados  </li> </ul>"},{"location":"arquitetura/arquitetura/#template","title":"Template","text":"<ul> <li>Em projetos de API com DRF, o \"Template\" tradicional n\u00e3o \u00e9 usado  </li> <li>A resposta \u00e9 entregue em JSON ao inv\u00e9s de HTML  </li> </ul>"},{"location":"arquitetura/arquitetura/#view","title":"View","text":"<ul> <li>DRF ViewSets/APIViews controlam a l\u00f3gica de requisi\u00e7\u00e3o  </li> <li>Serializers atuam como a \"camada de apresenta\u00e7\u00e3o\", validando e formatando os dados para a API  </li> </ul>"},{"location":"arquitetura/arquitetura/#fluxo-de-requisicao","title":"Fluxo de Requisi\u00e7\u00e3o","text":"<ol> <li>Cliente faz requisi\u00e7\u00e3o HTTP para a API  </li> <li>Router do DRF identifica a rota e direciona para a View correspondente  </li> <li>View (ViewSet/APIView) processa a requisi\u00e7\u00e3o  </li> <li>Serializer valida/transforma os dados  </li> <li>Model/ORM acessa o banco PostgreSQL  </li> <li>Resposta \u00e9 formatada em JSON e enviada ao cliente  </li> </ol>"},{"location":"arquitetura/arquitetura/#beneficios-da-arquitetura","title":"Benef\u00edcios da Arquitetura","text":"<ul> <li>Produtividade: Django e DRF oferecem muitas funcionalidades prontas  </li> <li>Organiza\u00e7\u00e3o: C\u00f3digo dividido em Models, Views, Serializers e URLs  </li> <li>Testabilidade: DRF permite testes unit\u00e1rios e de integra\u00e7\u00e3o de endpoints  </li> <li>Escalabilidade: Suporte a cache, balanceamento de carga e horizontal scaling  </li> <li>Seguran\u00e7a: Prote\u00e7\u00f5es nativas contra SQL Injection, CSRF e XSS  </li> <li>Extensibilidade: F\u00e1cil integra\u00e7\u00e3o com bibliotecas externas (JWT, Swagger, Celery)  </li> </ul>"},{"location":"backlog/historias/","title":"Hist\u00f3rias de Usu\u00e1rio \u2013 Plataforma Chie-Aqui","text":""},{"location":"backlog/historias/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento apresenta as hist\u00f3rias de usu\u00e1rio do Sistema de Reclama\u00e7\u00f5es, uma plataforma que conecta usu\u00e1rios consumidores a empresas, permitindo registrar reclama\u00e7\u00f5es, responder e acompanhar resolu\u00e7\u00f5es.  </p> <p>O sistema possui tr\u00eas tipos de usu\u00e1rios principais: - Consumidores (que registram reclama\u00e7\u00f5es), - Empresas (que recebem e respondem \u00e0s reclama\u00e7\u00f5es), - Administradores (que fazem a gest\u00e3o geral do sistema).  </p> <p>As hist\u00f3rias foram priorizadas usando o m\u00e9todo MoSCoW, considerando o valor para o neg\u00f3cio e depend\u00eancias entre funcionalidades.  </p>"},{"location":"backlog/historias/#historias-priorizadas","title":"Hist\u00f3rias Priorizadas","text":""},{"location":"backlog/historias/#consumidor","title":"Consumidor","text":"ID Hist\u00f3ria Prioridade US01 Como consumidor, quero me cadastrar para registrar reclama\u00e7\u00f5es. Must have US02 Como consumidor, quero fazer login para acessar minhas reclama\u00e7\u00f5es. Must have US03 Como consumidor, quero registrar uma reclama\u00e7\u00e3o informando empresa, t\u00edtulo e descri\u00e7\u00e3o. Must have US04 Como consumidor, quero visualizar minhas reclama\u00e7\u00f5es abertas e encerradas. Must have US05 Como consumidor, quero editar meu perfil (nome, email, senha, telefone). Should have US06 Como consumidor, quero avaliar a resposta da empresa como \"Resolvido\" ou \"N\u00e3o Resolvido\". Must have US07 Como consumidor, quero anexar documentos ou imagens \u00e0 minha reclama\u00e7\u00e3o. Could have US08 Como consumidor, quero excluir minha conta quando desejar. Could have US09 Como consumidor, quero deslogar a qualquer momento. Should have"},{"location":"backlog/historias/#empresa","title":"Empresa","text":"ID Hist\u00f3ria Prioridade US10 Como empresa, quero me cadastrar para poder responder \u00e0s reclama\u00e7\u00f5es. Must have US11 Como empresa, quero fazer login para acessar reclama\u00e7\u00f5es contra minha marca. Must have US12 Como empresa, quero visualizar todas as reclama\u00e7\u00f5es recebidas. Must have US13 Como empresa, quero responder \u00e0s reclama\u00e7\u00f5es dos consumidores. Must have US14 Como empresa, quero editar meu perfil (nome fantasia, CNPJ, email, senha, telefone). Should have US15 Como empresa, quero visualizar estat\u00edsticas de satisfa\u00e7\u00e3o (resolvidas/n\u00e3o resolvidas). Could have US16 Como empresa, quero deslogar a qualquer momento. Should have"},{"location":"backlog/historias/#administrador","title":"Administrador","text":"ID Hist\u00f3ria Prioridade US20 Como administrador, quero visualizar todos os consumidores cadastrados. Must have US21 Como administrador, quero visualizar todas as empresas cadastradas. Must have US22 Como administrador, quero remover usu\u00e1rios ou empresas que violem regras. Must have US23 Como administrador, quero visualizar todas as reclama\u00e7\u00f5es feitas no sistema. Must have US24 Como administrador, quero buscar consumidores/empresas por email ou CNPJ. Should have US25 Como administrador, quero ver relat\u00f3rios de quantidade de reclama\u00e7\u00f5es por empresa. Could have ---"},{"location":"backlog/historias/#sistema-e-funcionalidades-tecnicas","title":"Sistema e Funcionalidades T\u00e9cnicas","text":"ID Hist\u00f3ria Prioridade US28 Como usu\u00e1rio do sistema, quero que as reclama\u00e7\u00f5es tenham status (Aberta, Respondida, Encerrada). Must have US29 Como usu\u00e1rio do sistema, quero que reclama\u00e7\u00f5es tenham IDs \u00fanicos para rastreamento. Must have US30 Como usu\u00e1rio do sistema, quero que existam filtros de reclama\u00e7\u00f5es por empresa e status. Should have US31 Como usu\u00e1rio do sistema, quero que o sistema envie emails autom\u00e1ticos em eventos-chave (nova reclama\u00e7\u00e3o, resposta, encerramento). Could have US32 Como administrador, quero que o sistema registre logs de todas as a\u00e7\u00f5es. Must have"},{"location":"backlog/historias/#legenda-metodo-moscow","title":"Legenda \u2013 M\u00e9todo MoSCoW","text":"<ul> <li>Must have: Funcionalidades essenciais e cr\u00edticas para o sistema.  </li> <li>Should have: Funcionalidades importantes que agregam valor significativo.  </li> <li>Could have: Funcionalidades desej\u00e1veis que podem ser implementadas se houver tempo.  </li> <li>Won\u2019t have: Funcionalidades que n\u00e3o ser\u00e3o implementadas nesta vers\u00e3o.  </li> </ul>"}]}